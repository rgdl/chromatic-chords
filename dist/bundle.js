(()=>{const t=["C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B"];class e{constructor(t,e){this.name=t,this.notes=e,this.verify()}verify(){this.notes.map(((t,e)=>{console.assert(t>=0),console.assert(t<12),e>0&&console.assert(t>this.notes[e-1])}))}distance(t,e=!1){console.assert(this.notes.length===t.notes.length);let s=1/0;const o=[...t.notes];for(let t=0;t<this.notes.length;t++){e&&console.log(o,this.notes);const t=o.map(((t,s)=>{const o=[Math.abs(12+t-this.notes[s])%12,Math.abs(12+this.notes[s]-t)%12];return e&&console.log(o),Math.min(...o)})).reduce(((t,e)=>t+e),0);t<s&&(s=t),e&&console.log(t),o.unshift(o.pop())}return s}}const s=Object.fromEntries(["C","F","D","G"].map(((t,s)=>[t,new e(`${t} Augmented`,[s,4+s,8+s])]))),o=Object.fromEntries(t.map(((t,s)=>[t,new e(`${t} Major`,[s,4+s,7+s].map((t=>t%12)).sort(((t,e)=>t-e)))]))),n=Object.fromEntries(t.map(((t,s)=>[t,new e(`${t} Minor`,[s,3+s,7+s].map((t=>t%12)).sort(((t,e)=>t-e)))])));function i(t,e,s){const o=t.distance(e);if(o!==s)throw t.distance(e,verbose=!0),new Error(`Distance from ${t.name} to ${e.name} is ${o}, but the expected distance is ${s}`)}[["C","F"],["F","D"],["D","G"],["G","C"]].map((t=>i(s[t[0]],s[t[1]],3))),[["C","D"],["F","G"],["D","C"],["G","F"]].map((t=>i(s[t[0]],s[t[1]],6))),i(o.C,n.E,1),i(o.C,o.G,3),i(o.E,s.C,1),i(s.C,o.E,1);class c{constructor(t,e={}){this.node=t,this.applyStyle(e)}applyStyle(t){Object.keys(t).map((e=>this.node.style[e]=t[e]))}addClass(t){const e=this.node.className;this.node.className=e?`${e} ${t}`:`${t}`}}class a extends c{constructor(t,e,s=!1){const o=document.createElement("div");o.className="chord-link",document.body.appendChild(o),super(o,{zIndex:1+(s?-1:1)}),this.neighbours=[t,e],this.setPosition(),window.addEventListener("resize",(()=>this.setPosition()))}setPosition(){const t=this.neighbours.map((t=>t.getBoundingClientRect())).map((t=>[t.left+t.width/2,t.top+t.height/2])),e=t[1][0]-t[0][0],s=t[1][1]-t[0][1],o=180*Math.atan(s/e)/Math.PI,n=Math.sqrt(e**2+s**2),i=(t[0][0]+t[1][0]-n)/2,c=(t[0][1]+t[1][1])/2;this.applyStyle({transform:`rotate(${o}deg)`,width:`${n}px`,left:`${i}px`,top:`${c}px`})}}class h extends c{constructor(t){super(t)}}class r extends c{constructor(t){super(t,{width:"60%",height:"60%",marginTop:"10%",marginBottom:"10%"}),this.node.style.display="block"}appendChild(t){this.node.appendChild(t)}}class d extends c{constructor(t,e,s){const o=document.createElement("div");e&&(o.textContent=e),o.className="chord-box",t.appendChild(o),super(o,{width:"20%",left:100*s[1]-10+"%",height:"20%",top:100*s[0]-10+"%",zIndex:1}),this.position=s,this.validate()}validate(){console.assert(Math.min(...this.position)>=0),console.assert(Math.max(...this.position)<=1)}}class l extends d{constructor(t,e,s,o){super(t,e,o),this.chord=s}}class m extends d{constructor(t,e,s,o){console.assert(2===e.length),super(t,null,[0,1].map((t=>(e[0].position[t]+e[1].position[t])/2))),this.container=t,this.neighbours=e,this.chordCols=s,this.chordLinks=o,this.checkChords(),this.build(),this.addClass("asymmetrical-chord-box")}build(){const t=document.createElement("table"),e=document.createElement("tbody"),s={};let o=0;for(;;){const t=document.createElement("tr");let n=!1;for(const e of this.chordCols)if(o<e.length){const i=e[o],c=document.createElement("td");console.assert(!Object.keys(s).includes(i.name)),s[i.name]=c,c.textContent=i.name,t.appendChild(c),n=!0}if(!n)break;e.appendChild(t),o++}t.appendChild(e),this.node.appendChild(t),this.neighbours.map((t=>new a(this.node,t.node,!0))),this.chordLinks.map((t=>new a(s[t[0].name],s[t[1].name])))}checkChords(){this.chordCols[0].map((t=>i(neighbours[0].chord,t,1)));for(let t=1;t<this.chordCols.length;t++){const e=this.chordCols[t-1],s=this.chordCols[t];for(const t of e){const e=Math.min(...s.map((e=>t.distance(e))));console.assert(1===e)}}this.chordCols[this.chordCols.length-1].map((t=>i(neighbours[1].chord,t,1)));for(let t of this.chordLinks)console.assert(t[0].distance(t[1]))}}document.addEventListener("DOMContentLoaded",(function(){const t=new r(document.getElementById("triad-container")),e=(new h(document.getElementById("triad-selection")),[[0,.5],[.5,0],[1,.5],[.5,1]]),i=Object.fromEntries(["C","F","D","G"].map(((o,n)=>[o,new l(t,`${o} augmented`,s[o],e[n])])));new m(t,neighbours=[i.C,i.G],chordCols=[o,n].map((t=>["C","E","Ab"].map((e=>t[e])))),chordLinks=[[o.C,n.C],[o.C,n.E],[o.E,n.E],[o.E,n.Ab],[o.Ab,n.Ab],[o.Ab,n.C]]),new m(t,neighbours=[i.D,i.G],chordCols=[n,o].map((t=>["G","B","Eb"].map((e=>t[e])))),chordLinks=[[o.G,n.G],[o.G,n.B],[o.B,n.B],[o.B,n.Eb],[o.Eb,n.Eb],[o.Eb,n.G]]),new m(t,neighbours=[i.F,i.D],chordCols=[n,o].map((t=>["D","Gb","Bb"].map((e=>t[e])))),chordLinks=[[o.D,n.D],[o.D,n.Gb],[o.Gb,n.Gb],[o.Gb,n.Bb],[o.Bb,n.Bb],[o.Bb,n.D]]),new m(t,neighbours=[i.F,i.C],chordCols=[o,n].map((t=>["F","A","Db"].map((e=>t[e])))),chordLinks=[[o.F,n.F],[o.F,n.A],[o.A,n.A],[o.A,n.Db],[o.Db,n.Db],[o.Db,n.F]])}))})();